import json
import requests
import os
import argparse

# core/cryptos.py рд╕реЗ рдЖрд╡рд╢реНрдпрдХ рдлрд╝рдВрдХреНрд╢рди рдЗрдВрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
from core.cryptos import generate_wallet, sign_transaction 

# ----------------------------------------------------
# рдЧреНрд▓реЛрдмрд▓ рд╕реЗрдЯрд┐рдВрдЧреНрд╕
# ----------------------------------------------------
# рд╡реЙрд▓реЗрдЯ рдлрд╝рд╛рдЗрд▓реЛрдВ рдХреЛ рдпрд╣реАрдВ рд╕реЗрд╡ рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛
WALLET_DIR = 'wallet_data'
# рдЬрд┐рд╕ рдиреЛрдб рд╕реЗ рдпрд╣ рд╡реЙрд▓реЗрдЯ рдмрд╛рдд рдХрд░реЗрдЧрд╛ (рд╣рдорд╛рд░рд╛ API)
NODE_URL = 'http://localhost:5000' 

# ----------------------------------------------------
# 1. рд╡реЙрд▓реЗрдЯ рдлрд╝рд╛рдЗрд▓ рдкреНрд░рдмрдВрдзрди
# ----------------------------------------------------

def load_wallet(filename='my_key.json'):
    """ рд╡реЙрд▓реЗрдЯ рдлрд╝рд╛рдЗрд▓ рд╕реЗ рдкреНрд░рд╛рдЗрд╡реЗрдЯ рдХреА рдФрд░ рдПрдбреНрд░реЗрд╕ рд▓реЛрдб рдХрд░реЗрдВ """
    path = os.path.join(WALLET_DIR, filename)
    if not os.path.exists(path):
        return None
    # ЁЯМЯ FIX: рдпрд╣рд╛рдБ load_wallet рдлрд╝рдВрдХреНрд╢рди рдХрд╛ рдЕрдзреВрд░рд╛ рд▓реЙрдЬрд┐рдХ рдкреВрд░рд╛ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ ЁЯМЯ
    try:
        with open(path, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"тЭМ рддреНрд░реБрдЯрд┐: рд╡реЙрд▓реЗрдЯ рдлрд╝рд╛рдЗрд▓ '{filename}' рдХреЛ рдкрдврд╝рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛ред ({e})")
        return None

def save_wallet(wallet_data, filename='my_key.json'):
    """ рд╡реЙрд▓реЗрдЯ рдбреЗрдЯрд╛ рдХреЛ JSON рдлрд╝рд╛рдЗрд▓ рдореЗрдВ рд╕реЗрд╡ рдХрд░реЗрдВ """
    if not os.path.exists(WALLET_DIR):
        os.makedirs(WALLET_DIR)
    path = os.path.join(WALLET_DIR, filename)
    with open(path, 'w') as f:
        json.dump(wallet_data, f, indent=4)
    print(f"\nЁЯФС рд╡реЙрд▓реЗрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕реЗрд╡ рдХрд┐рдпрд╛ рдЧрдпрд╛: {path}")


# ----------------------------------------------------
# 2. рд╡реЙрд▓реЗрдЯ рдлрдВрдХреНрд╢рдиреНрд╕
# ----------------------------------------------------

def create_new_wallet():
    """ рдПрдХ рдирдпрд╛ рд╡реЙрд▓реЗрдЯ рдмрдирд╛рддрд╛ рд╣реИ рдФрд░ рдЙрд╕реЗ рд╕реЗрд╡ рдХрд░рддрд╛ рд╣реИ """
    wallet = generate_wallet()
    
    print("\n--- рдирдпрд╛ MyCoin рд╡реЙрд▓реЗрдЯ ---")
    print("WARNING: рдЕрдкрдиреА рдкреНрд░рд╛рдЗрд╡реЗрдЯ рдХреА рдХреЛ рдХрднреА рдХрд┐рд╕реА рдХреЛ рди рджреЗрдВ!")
    print(f"Address: {wallet['public_address']}")
    
    # рдлрд╝рд╛рдЗрд▓ рдирд╛рдо рдкреВрдЫреЗрдВ
    filename = input("\nрд╕реЗрд╡ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдлрд╝рд╛рдЗрд▓ рдирд╛рдо (рдЬреИрд╕реЗ: 'alice_key.json'): ")
    if not filename.endswith('.json'):
        filename += '.json'
        
    save_wallet(wallet, filename)
    return wallet

def get_balance_cli(address):
    """ рдиреЛрдб API рд╕реЗ рдмреИрд▓реЗрдВрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ """
    try:
        response = requests.get(f'{NODE_URL}/balance/{address}')
        response.raise_for_status() 
        
        balance = response.json().get('balance', 0.0)
        print(f"\nЁЯТ░ рдПрдбреНрд░реЗрд╕ {address[:10]}... рдкрд░ рдмреИрд▓реЗрдВрд╕: {balance} MyCoin")
        return balance
    except requests.exceptions.ConnectionError:
        print(f"\nтЭМ рдиреЛрдб рдХрдиреЗрдХреНрд╢рди рддреНрд░реБрдЯрд┐: рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЖрдкрдХрд╛ рдиреЛрдб ({NODE_URL}) рдЪрд▓ рд░рд╣рд╛ рд╣реИред")
    except Exception as e:
        print(f"\nтЭМ рддреНрд░реБрдЯрд┐: {e}")

def create_and_send_transaction(wallet_data):
    """ рдЯреНрд░рд╛рдВрдЬреИрдХреНрд╢рди рдмрдирд╛рддрд╛ рд╣реИ, рд╕рд╛рдЗрди рдХрд░рддрд╛ рд╣реИ рдФрд░ рдиреЛрдб рдХреЛ рднреЗрдЬрддрд╛ рд╣реИ """
    sender = wallet_data['public_address']
    
    print("\n--- рдирдпрд╛ рдЯреНрд░рд╛рдВрдЬреИрдХреНрд╢рди ---")
    recipient = input("рдкреНрд░рд╛рдкреНрддрдХрд░реНрддрд╛ рдХрд╛ рдкрддрд╛ (Recipient Address): ")
    try:
        amount = float(input("рднреЗрдЬреА рдЬрд╛рдиреЗ рд╡рд╛рд▓реА рд░рд╛рд╢рд┐ (Amount): "))
    except ValueError:
        print("тЭМ рдЕрдорд╛рдиреНрдп рд░рд╛рд╢рд┐ред")
        return

    # 1. рдЯреНрд░рд╛рдВрдЬреИрдХреНрд╢рди рд╕рд╛рдЗрди рдХрд░реЗрдВ
    signature = sign_transaction(
        wallet_data['private_key'], 
        sender, 
        recipient, 
        amount
    )
    
    if not signature:
        print("тЭМ рд╣рд╕реНрддрд╛рдХреНрд╖рд░ рдмрдирд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред")
        return

    # 2. рдЯреНрд░рд╛рдВрдЬреИрдХреНрд╢рди рдбреЗрдЯрд╛ рддреИрдпрд╛рд░ рдХрд░реЗрдВ
    transaction_data = {
        'sender': sender,
        'recipient': recipient,
        'amount': amount,
        'signature': signature
    }

    # 3. рдиреЛрдб API рдХреЛ рднреЗрдЬреЗрдВ
    try:
        response = requests.post(f'{NODE_URL}/transactions/new', json=transaction_data)
        response.raise_for_status() 
        
        print("\nтЬЕ рдЯреНрд░рд╛рдВрдЬреИрдХреНрд╢рди рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬрд╛ рдЧрдпрд╛!")
        print(f"рдиреЛрдб рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛: {response.json()['message']}")
    except requests.exceptions.ConnectionError:
        print(f"\nтЭМ рдиреЛрдб рдХрдиреЗрдХреНрд╢рди рддреНрд░реБрдЯрд┐: рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЖрдкрдХрд╛ рдиреЛрдб ({NODE_URL}) рдЪрд▓ рд░рд╣рд╛ рд╣реИред")
    except requests.exceptions.HTTPError as e:
        # 406 Not Acceptable (рд╣рд╕реНрддрд╛рдХреНрд╖рд░ рддреНрд░реБрдЯрд┐ рдпрд╛ рдЕрдкрд░реНрдпрд╛рдкреНрдд рдлрдВрдб) рдХреЛ рдпрд╣рд╛рдБ рд╣реИрдВрдбрд▓ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ
        print(f"\nтЭМ рдЯреНрд░рд╛рдВрдЬреИрдХреНрд╢рди рддреНрд░реБрдЯрд┐: {e.response.json().get('message', 'Unknown error')}")
    except Exception as e:
        print(f"\nтЭМ рдПрдХ рдЕрдирдкреЗрдХреНрд╖рд┐рдд рддреНрд░реБрдЯрд┐ рд╣реБрдИ: {e}")

def display_public_address_cli(address):
    """ рдкрдмреНрд▓рд┐рдХ рдПрдбреНрд░реЗрд╕ рдХреЛ рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рдбрд┐рд╕реНрдкреНрд▓реЗ рдХрд░реЗрдВ (рд╡реЗрдм UI рдХреЗ рд▓рд┐рдП рдХреЙрдкреА рдХрд░рдиреЗ рд╣реЗрддреБ) """
    print("\n---------------------------------------------------------")
    print("ЁЯУЛ рдЖрдкрдХреА рдкрдмреНрд▓рд┐рдХ рдХреА (рд╡реЗрдм UI рдореЗрдВ рдкреЗрд╕реНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП):")
    print(f"\n{address}")
    print("\n---------------------------------------------------------")


# ----------------------------------------------------
# 3. рдореБрдЦреНрдп CLI рдореЗрдиреВ
# ----------------------------------------------------

def main_menu():
    """ рд╡реЙрд▓реЗрдЯ CLI рдореЗрдиреВ """
    while True:
        print("\n\n=== MyCoin Wallet CLI ===")
        print("1. ЁЯФС рдирдпрд╛ рд╡реЙрд▓реЗрдЯ рдмрдирд╛рдПрдБ рдФрд░ рд╕реЗрд╡ рдХрд░реЗрдВ")
        print("2. ЁЯТ╛ рдореМрдЬреВрджрд╛ рд╡реЙрд▓реЗрдЯ рд▓реЛрдб рдХрд░реЗрдВ")
        print("3. тЭМ рдмрд╛рд╣рд░ рдирд┐рдХрд▓реЗрдВ")
        
        choice = input("рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ: ")
        
        if choice == '1':
            create_new_wallet()
        elif choice == '2':
            filename = input("рд▓реЛрдб рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдлрд╝рд╛рдЗрд▓ рдирд╛рдо (рдЬреИрд╕реЗ: 'alice_key.json'): ")
            loaded_wallet = load_wallet(filename)
            if loaded_wallet:
                wallet_actions_menu(loaded_wallet)
            else:
                print("тЭМ рдлрд╝рд╛рдЗрд▓ рдирд╣реАрдВ рдорд┐рд▓реАред")
        elif choice == '3':
            break
        else:
            print("рдЕрдорд╛рдиреНрдп рд╡рд┐рдХрд▓реНрдкред")

def wallet_actions_menu(wallet_data):
    """ рд▓реЛрдб рдХрд┐рдП рдЧрдП рд╡реЙрд▓реЗрдЯ рдХреЗ рд╕рд╛рде рдХрд╛рд░реНрдп рдХрд░реЗрдВ """
    address = wallet_data['public_address']
    
    while True:
        print(f"\n--- рд╡реЙрд▓реЗрдЯ рдПрдбреНрд░реЗрд╕: {address[:10]}... ---")
        print("1. ЁЯТ░ рдмреИрд▓реЗрдВрд╕ рджреЗрдЦреЗрдВ")
        print("2. тЬНя╕П рдХреЙрдЗрди рднреЗрдЬреЗрдВ (рдирдпрд╛ рдЯреНрд░рд╛рдВрдЬреИрдХреНрд╢рди)")
        print("3. ЁЯУЛ Public Key рдбрд┐рд╕реНрдкреНрд▓реЗ рдХрд░реЗрдВ (рд╡реЗрдм UI рдХреЗ рд▓рд┐рдП)")
        print("4. тмЕя╕П рдореЗрди рдореЗрдиреВ рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдБ")
        
        choice = input("рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ: ")
        
        if choice == '1':
            get_balance_cli(address)
        elif choice == '2':
            create_and_send_transaction(wallet_data)
        elif choice == '3':
            display_public_address_cli(address)
        elif choice == '4':
            break
        else:
            print("рдЕрдорд╛рдиреНрдп рд╡рд┐рдХрд▓реНрдкред")

if __name__ == '__main__':
    # рдХрдорд╛рдВрдб рд▓рд╛рдЗрди рдЖрд░реНрдЧреБрдореЗрдВрдЯ рдкрд╛рд░реНрд╕рд░ рд╕реЗрдЯ рдХрд░реЗрдВ рддрд╛рдХрд┐ NODE_URL рдХреЛ рдмрджрд▓рд╛ рдЬрд╛ рд╕рдХреЗ
    parser = argparse.ArgumentParser(description="MyCoin Wallet CLI")
    parser.add_argument(
        '-n', '--node', 
        type=str, 
        default='http://localhost:5000', 
        help='The URL of the MyCoin node API (default: http://localhost:5000)'
    )
    args = parser.parse_args()
    NODE_URL = args.node
    
    print(f"Connecting to node at: {NODE_URL}")
    main_menu()
