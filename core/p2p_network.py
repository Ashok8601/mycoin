import requests
import json
import logging

# рдпрд╣ рдЗрдВрдкреЛрд░реНрдЯ рдЬреЛрдбрд╝реЗрдВ (рдпрд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпрд╣ utils/data_storage рдореЗрдВ рдореМрдЬреВрдж рд╣реИ)
from utils.data_storage import load_blockchain_data 

# рдиреЗрдЯрд╡рд░реНрдХ рдЧрддрд┐рд╡рд┐рдзрд┐ рдХреЛ рдЯреНрд░реИрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд▓реЙрдЧрд┐рдВрдЧ рд╕реЗрдЯ рдХрд░реЗрдВ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

def broadcast_data(node_set, endpoint, data):
    """
    рдиреЗрдЯрд╡рд░реНрдХ рдореЗрдВ рд╕рднреА рд░рдЬрд┐рд╕реНрдЯрд░реНрдб рдиреЛрдбреНрд╕ рдХреЛ рджрд┐рдП рдЧрдП рдПрдВрдбрдкреЙрдЗрдВрдЯ рдкрд░ рдбреЗрдЯрд╛ рднреЗрдЬрддрд╛ рд╣реИред
    """
    success_count = 0
    
    # рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ node_set рдПрдХ рд╕реЗрдЯ рд╣реИ
    if not isinstance(node_set, set):
        logging.error("P2P: Invalid node list provided (expected set).")
        return success_count

    # рдкреНрд░рддреНрдпреЗрдХ рдкрдбрд╝реЛрд╕реА рдиреЛрдб рдкрд░ рд▓реВрдк рдХрд░реЗрдВ
    for node in node_set:
        # Render URL HTTPS рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реИрдВред 
        # http:// рдпрд╛ https:// рдореЗрдВ рд╕реЗ рд╕рд╣реА рдЪреБрдиреЗрдВ
        # рд╣рдо рдпрд╣рд╛рдБ рд╕реБрд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП HTTPS рдорд╛рди рд░рд╣реЗ рд╣реИрдВ, рд▓реЗрдХрд┐рди Render рдХреЗ рдЖрдВрддрд░рд┐рдХ рдХрдореНрдпреБрдирд┐рдХреЗрд╢рди рдХреЗ рд▓рд┐рдП HTTP рдХрд╛ рднреА рдкреНрд░рдпрд╛рд╕ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред
        url = f'http://{node}{endpoint}' 
        try:
            # POST рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рднреЗрдЬрдХрд░ рдбреЗрдЯрд╛ рдкреНрд░рд╕рд╛рд░рд┐рдд рдХрд░реЗрдВ
            # 5 рд╕реЗрдХрдВрдб рдХрд╛ рдЯрд╛рдЗрдордЖрдЙрдЯ рд╕реЗрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛
            response = requests.post(url, json=data, timeout=5)
            
            if response.status_code in [200, 201]:
                success_count += 1
                # logging.info(f"P2P: Successfully broadcast to {node}{endpoint}")
            else:
                logging.warning(f"P2P: Failed to broadcast to {node}. Status: {response.status_code}")
                
        except requests.exceptions.RequestException as e:
            # рдХрдиреЗрдХреНрд╢рди рддреНрд░реБрдЯрд┐рдпреЛрдВ рдХреЛ рдкрдХрдбрд╝реЗрдВ (рдЬреИрд╕реЗ рдиреЛрдб рдСрдлрд╝рд▓рд╛рдЗрди рд╣реИ)
            logging.error(f"P2P: Node {node} is unreachable. Error: {e}")
            
    return success_count

def broadcast_transaction(blockchain_instance, transaction):
    """
    рдПрдХ рдирдП рдЯреНрд░рд╛рдВрдЬреИрдХреНрд╢рди рдХреЛ рд╕рднреА рдиреЛрдбреНрд╕ рдкрд░ рдкреНрд░рд╕рд╛рд░рд┐рдд рдХрд░рддрд╛ рд╣реИред
    """
    # /transactions/new рдПрдВрдбрдкреЙрдЗрдВрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
    endpoint = '/transactions/new'
    
    # рдЯреНрд░рд╛рдВрдЬреИрдХреНрд╢рди рдкреВрд▓ рдХреЗ рд▓рд┐рдП рднреА рддрд╛рдЬрд╝рд╛ рдиреЛрдб рд▓рд┐рд╕реНрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛ рдмреЗрд╣рддрд░ рд╣реИред
    try:
        _, _, nodes_to_broadcast = load_blockchain_data()
    except Exception:
        # рдпрджрд┐ рдбрд┐рд╕реНрдХ рд╕реЗ рд▓реЛрдб рдирд╣реАрдВ рд╣реЛ рд╕рдХрд╛, рддреЛ рдореЗрдореЛрд░реА рдореЗрдВ рдореМрдЬреВрдж рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
        nodes_to_broadcast = blockchain_instance.nodes.copy()
    
    logging.info(f"P2P: Broadcasting new transaction to {len(nodes_to_broadcast)} nodes.")
    
    broadcast_data(nodes_to_broadcast, endpoint, transaction)


def broadcast_new_block(blockchain_instance, block):
    """
    рдиреЗрдЯрд╡рд░реНрдХ рдХреЛ рд╕реВрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдПрдХ рдирдпрд╛ рдмреНрд▓реЙрдХ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдорд╛рдЗрди рд╣реЛ рдЧрдпрд╛ рд╣реИред
    ЁЯЪи Gunicorn рдЕрдиреБрдХреВрд▓рддрд╛ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рдиреЛрдб рд▓рд┐рд╕реНрдЯ рдХреЛ рдбрд┐рд╕реНрдХ рд╕реЗ рд░реАрд▓реЛрдб рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред
    """
    endpoint = '/blocks/new'
    
    data = {
        'block': block
    }
    
    # ЁЯЪи рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╕реБрдзрд╛рд░: рдиреЛрдб рд▓рд┐рд╕реНрдЯ рдХреЛ рдбрд┐рд╕реНрдХ рд╕реЗ рд░реАрд▓реЛрдб рдХрд░реЗрдВ 
    # (рддрд╛рдХрд┐ Gunicorn рд╡рд░реНрдХрд░ рддрд╛рдЬрд╝рд╛ рдбреЗрдЯрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ)
    try:
        # load_blockchain_data рдХреЛ рдЪреЗрди, рдХрдард┐рдирд╛рдИ рдФрд░ рдиреЛрдбреНрд╕ рдХреЛ рд░рд┐рдЯрд░реНрди рдХрд░рдирд╛ рдЪрд╛рд╣рд┐рдПред
        _, _, nodes_to_broadcast = load_blockchain_data()
    except Exception as e:
        logging.warning(f"P2P: Failed to load fresh node list from disk: {e}. Using current memory list.")
        # рдпрджрд┐ рдбрд┐рд╕реНрдХ рд╕реЗ рд▓реЛрдб рдирд╣реАрдВ рд╣реЛ рд╕рдХрд╛, рддреЛ рдореЗрдореЛрд░реА рдореЗрдВ рдореМрдЬреВрдж рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
        nodes_to_broadcast = blockchain_instance.nodes.copy()
        
    logging.info(f"P2P: Broadcasting new block {block['index']} to {len(nodes_to_broadcast)} nodes.")
    
    success_count = broadcast_data(nodes_to_broadcast, endpoint, data)
    
    # рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐ рд▓реЙрдЧ рд╕рд╣реА рд╣реЛ, рд╕рдлрд▓ рдкреНрд░рд╕рд╛рд░рдг рдХреА рд╕рдВрдЦреНрдпрд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
    logging.info(f"P2P: Successfully broadcast block {block['index']} to {success_count} nodes.")
