import requests
import json
from typing import TYPE_CHECKING, Dict, Any, Set

# Gunicorn ‡§µ‡§∞‡•ç‡§ï‡§∞ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è data_storage ‡§∏‡•á ‡§á‡§Ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
from utils.data_storage import load_blockchain_data 

# Circular dependency ‡§∏‡•á ‡§¨‡§ö‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
if TYPE_CHECKING:
    from .blockchain import Blockchain 
else:
    # ‡§Ø‡§¶‡§ø ‡§Ü‡§™ type checking ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã Placeholder ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
    Blockchain = Any


def broadcast_transaction(blockchain: 'Blockchain', transaction: Dict[str, Any]):
    """ ‡§è‡§ï ‡§®‡§è ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§ú‡•à‡§ï‡•ç‡§∂‡§® ‡§ï‡•ã ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§∏‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§ """
    
    # ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§ú‡•à‡§ï‡•ç‡§∂‡§® ‡§™‡•ç‡§∞‡§∏‡§æ‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≠‡•Ä ‡§®‡•ã‡§° ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§∞‡•Ä‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç 
    try:
        _, _, fresh_nodes = load_blockchain_data()
        nodes_to_broadcast = fresh_nodes
    except Exception:
        nodes_to_broadcast = blockchain.nodes

    for node in nodes_to_broadcast:
        # P2P URLs ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§ï‡§∞‡•á‡§Ç
        url = f'https://{node}/transactions/new' if 'http' not in node and 'https' not in node else f'{node}/transactions/new'
        
        try:
            requests.post(url, json=transaction, timeout=2) 
        except requests.exceptions.RequestException:
            # ‡§™‡•ç‡§∞‡§∏‡§æ‡§∞‡§£ ‡§µ‡§ø‡§´‡§≤ ‡§∞‡§π‡§æ, ‡§Ö‡§ó‡§≤‡•á ‡§®‡•ã‡§° ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Å
            continue


def broadcast_new_block(blockchain: 'Blockchain', block: Dict[str, Any]):
    """ 
    ‡§®‡§è ‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡•ã ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§Æ‡•á‡§Ç ‡§∏‡§≠‡•Ä ‡§®‡•ã‡§°‡•ç‡§∏ ‡§§‡§ï ‡§™‡•ç‡§∞‡§∏‡§æ‡§∞‡§ø‡§§ (broadcast) ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
    """
    
    # üö® ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡•Å‡§ß‡§æ‡§∞: ‡§®‡•ã‡§° ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§ï‡•ã ‡§°‡§ø‡§∏‡•ç‡§ï ‡§∏‡•á ‡§∞‡•Ä‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç 
    successful_transmissions = 0
    
    try:
        _, _, fresh_nodes = load_blockchain_data()
        nodes_to_broadcast: Set[str] = fresh_nodes
        
    except Exception as e:
        print(f"ERROR: Could not load fresh nodes for broadcast: {e}")
        nodes_to_broadcast = blockchain.nodes
        
    # ‡§°‡§ø‡§∏‡•ç‡§ï ‡§∏‡•á ‡§∞‡•Ä‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à ‡§®‡•ã‡§° ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§™‡§∞ ‡§™‡•ç‡§∞‡§∏‡§æ‡§∞‡§£ ‡§ï‡§∞‡•á‡§Ç
    for node in nodes_to_broadcast:
        # P2P URLs ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§ï‡§∞‡•á‡§Ç
        url = f'https://{node}/blocks/new' if 'http' not in node and 'https' not in node else f'{node}/blocks/new'

        try:
            response = requests.post(url, json={'block': block}, timeout=3) 
            
            if response.status_code == 200 or response.status_code == 201:
                successful_transmissions += 1
            else:
                print(f"WARN: Could not broadcast block to {node}. Status: {response.status_code}")
        except requests.exceptions.RequestException as e:
            # print(f"ERROR: Failed to broadcast block to {node}. Error: {e}")
            pass # ‡§µ‡§ø‡§´‡§≤ ‡§®‡•ã‡§°‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡•â‡§ó ‡§ï‡•ã ‡§∂‡§æ‡§Ç‡§§ ‡§∞‡§ñ‡•á‡§Ç

    print(f"P2P: Broadcasting new block {block['index']} to {successful_transmissions} nodes.")
    return successful_transmissions
