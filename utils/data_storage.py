import json
import os

# ‡§°‡•á‡§ü‡§æ ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§®‡§æ‡§Æ
DATA_FILE = 'blockchain.json'
# ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü ‡§∞‡•Ç‡§ü ‡§Æ‡•á‡§Ç 'data/' ‡§´‡§º‡•ã‡§≤‡•ç‡§°‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç
DATA_PATH = os.path.join('data', DATA_FILE)

def ensure_data_directory():
    """ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§°‡•á‡§ü‡§æ ‡§´‡§º‡•ã‡§≤‡•ç‡§°‡§∞ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à """
    data_dir = os.path.dirname(DATA_PATH)
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
        print(f"Created data directory: {data_dir}")

def save_blockchain(chain_data, current_difficulty, current_nodes):
    """
    ‡§¨‡•ç‡§≤‡•â‡§ï‡§ö‡•á‡§® ‡§ö‡•á‡§®, ‡§ï‡§†‡§ø‡§®‡§æ‡§à, ‡§î‡§∞ ‡§®‡•ã‡§° ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§ï‡•ã ‡§°‡§ø‡§∏‡•ç‡§ï ‡§™‡§∞ JSON ‡§´‡§º‡§æ‡§á‡§≤ ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
    """
    ensure_data_directory()
    
    data_to_save = {
        'chain': chain_data,
        'difficulty': current_difficulty,
        # ‡§®‡•ã‡§° ‡§∏‡•á‡§ü ‡§ï‡•ã ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø JSON ‡§∏‡•á‡§ü ‡§ï‡•ã ‡§∏‡•á‡§µ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ
        'nodes': list(current_nodes), 
        'timestamp': os.path.getmtime(os.path.dirname(DATA_PATH))
    }
    
    try:
        with open(DATA_PATH, 'w') as f:
            json.dump(data_to_save, f, indent=4)
        print(f"\n‚úÖ Blockchain data successfully saved to {DATA_PATH}")
    except Exception as e:
        print(f"\n‚ùå Error saving blockchain data: {e}")

def load_blockchain():
    """
    ‡§°‡§ø‡§∏‡•ç‡§ï ‡§∏‡•á ‡§¨‡•ç‡§≤‡•â‡§ï‡§ö‡•á‡§® ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
    ‡§Ø‡§¶‡§ø ‡§´‡§º‡§æ‡§á‡§≤ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã None ‡§∞‡§ø‡§ü‡§∞‡•ç‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
    """
    if not os.path.exists(DATA_PATH):
        print(f"\nüí° Data file not found at {DATA_PATH}. Starting with Genesis Block.")
        return None

    try:
        with open(DATA_PATH, 'r') as f:
            data = json.load(f)
            print(f"\n‚úÖ Blockchain data loaded successfully from {DATA_PATH}")
            # ‡§®‡•ã‡§° ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§ï‡•ã ‡§µ‡§æ‡§™‡§∏ ‡§∏‡•á‡§ü ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç
            data['nodes'] = set(data.get('nodes', [])) 
            return data
    except Exception as e:
        print(f"\n‚ùå Error loading blockchain data. Starting fresh. Error: {e}")
        return None