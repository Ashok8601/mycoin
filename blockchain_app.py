import os
import argparse
from uuid import uuid4
from api.node_api import app, blockchain, node_identifier # node_api ‡§∏‡•á Flask app ‡§î‡§∞ blockchain ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§ï‡•ã ‡§á‡§Ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç

# ----------------------------------------------------
# 1. ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§î‡§∞ ‡§§‡§∞‡•ç‡§ï (Configuration & Arguments)
# ----------------------------------------------------

def run_node():
    """
    ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§≤‡§æ‡§á‡§® ‡§Ü‡§∞‡•ç‡§ó‡•Å‡§Æ‡•á‡§Ç‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§®‡•ã‡§° ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§§‡§æ ‡§π‡•à‡•§
    """
    # ‡§Ü‡§∞‡•ç‡§ó‡•Å‡§Æ‡•á‡§Ç‡§ü ‡§™‡§æ‡§∞‡•ç‡§∏‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
    parser = argparse.ArgumentParser(description="MyCoin Blockchain Node")
    parser.add_argument(
        '-p', '--port', 
        type=int, 
        default=5000, 
        help='The port to run the node on (e.g., 5000, 5001)'
    )
    
    # ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§‡•Ä ‡§®‡•ã‡§°‡•ç‡§∏ ‡§ï‡•ã ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§∞‡•ç‡§ó‡•Å‡§Æ‡•á‡§Ç‡§ü (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)
    parser.add_argument(
        '--connect', 
        type=str, 
        nargs='*', # 0 ‡§Ø‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§®‡•ã‡§° ‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
        help='A list of initial peer node URLs to connect to (e.g., http://localhost:5001)'
    )

    args = parser.parse_args()
    port = args.port
    
    print("--------------------------------------------------")
    print("       üöÄ MyCoin Blockchain Node Initializing      ")
    print("--------------------------------------------------")
    print(f"Node ID: {node_identifier}")
    print(f"Initial Difficulty: {blockchain.difficulty}")
    print(f"Genesis Block Index: {blockchain.last_block['index']}")
    
    # 2. ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§‡•Ä ‡§®‡•ã‡§°‡•ç‡§∏ ‡§ï‡•ã ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç
    if args.connect:
        print("\nConnecting to peer nodes...")
        for peer in args.connect:
            if peer.strip() and not peer.endswith(f":{port}"): # ‡§ñ‡•Å‡§¶ ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§® ‡§ï‡§∞‡•á‡§Ç
                blockchain.register_node(peer.strip())
                print(f"  -> Registered: {peer.strip()}")
        
        # ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§∏‡§∞‡•ç‡§µ‡§∏‡§Æ‡•ç‡§Æ‡§§‡§ø ‡§∏‡•á ‡§ö‡•á‡§® ‡§∏‡§ø‡§Ç‡§ï ‡§ï‡§∞‡•á‡§Ç
        print("\nAttempting Consensus...")
        replaced = blockchain.resolve_conflicts()
        if replaced:
            print("Chain successfully synchronized with the network.")
            blockchain.balance_manager.recalculate_balances() # ‡§ö‡•á‡§® ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        else:
            print("Local chain is authoritative.")


    # 3. Flask App ‡§ö‡§≤‡§æ‡§è‡§Å
    print(f"\nStarting API server on port: {port}...")
    
    # ‡§°‡§ø‡§¨‡§ó ‡§Æ‡•ã‡§° ‡§ï‡•ã ‡§™‡§¨‡•ç‡§≤‡§ø‡§ï ‡§≤‡•â‡§®‡•ç‡§ö ‡§ï‡•á ‡§≤‡§ø‡§è False ‡§™‡§∞ ‡§∞‡§ñ‡•á‡§Ç
    app.run(host='0.0.0.0', port=port, debug=False) 

if __name__ == '__main__':
    run_node()